// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolutionsClient is the client API for Solutions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionsClient interface {
	GetAllSolutions(ctx context.Context, in *GetAllSolutionsRequest, opts ...grpc.CallOption) (*GetAllSolutionsResponse, error)
}

type solutionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionsClient(cc grpc.ClientConnInterface) SolutionsClient {
	return &solutionsClient{cc}
}

func (c *solutionsClient) GetAllSolutions(ctx context.Context, in *GetAllSolutionsRequest, opts ...grpc.CallOption) (*GetAllSolutionsResponse, error) {
	out := new(GetAllSolutionsResponse)
	err := c.cc.Invoke(ctx, "/dia.Solutions/GetAllSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionsServer is the server API for Solutions service.
// All implementations must embed UnimplementedSolutionsServer
// for forward compatibility
type SolutionsServer interface {
	GetAllSolutions(context.Context, *GetAllSolutionsRequest) (*GetAllSolutionsResponse, error)
	mustEmbedUnimplementedSolutionsServer()
}

// UnimplementedSolutionsServer must be embedded to have forward compatible implementations.
type UnimplementedSolutionsServer struct {
}

func (UnimplementedSolutionsServer) GetAllSolutions(context.Context, *GetAllSolutionsRequest) (*GetAllSolutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSolutions not implemented")
}
func (UnimplementedSolutionsServer) mustEmbedUnimplementedSolutionsServer() {}

// UnsafeSolutionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionsServer will
// result in compilation errors.
type UnsafeSolutionsServer interface {
	mustEmbedUnimplementedSolutionsServer()
}

func RegisterSolutionsServer(s grpc.ServiceRegistrar, srv SolutionsServer) {
	s.RegisterService(&Solutions_ServiceDesc, srv)
}

func _Solutions_GetAllSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionsServer).GetAllSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dia.Solutions/GetAllSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionsServer).GetAllSolutions(ctx, req.(*GetAllSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Solutions_ServiceDesc is the grpc.ServiceDesc for Solutions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Solutions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dia.Solutions",
	HandlerType: (*SolutionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSolutions",
			Handler:    _Solutions_GetAllSolutions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dia.proto",
}
